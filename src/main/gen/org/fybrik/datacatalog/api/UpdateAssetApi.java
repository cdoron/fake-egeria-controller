/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.fybrik.datacatalog.api;

import org.fybrik.datacatalog.model.UpdateAssetRequest;
import org.fybrik.datacatalog.model.UpdateAssetResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "updateAsset", description = "the updateAsset API")
public interface UpdateAssetApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PATCH /updateAsset : This REST API updates data asset information in the data catalog configured in fybrik
     *
     * @param xRequestDatacatalogUpdateCred This header carries credential information related to accessing the relevant destination catalog. (required)
     * @param updateAssetRequest Update Asset Request (required)
     * @return successful operation (status code 200)
     *         or Bad request - server cannot process the request due to client error (status code 400)
     *         or id not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateAsset",
        summary = "This REST API updates data asset information in the data catalog configured in fybrik",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UpdateAssetResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad request - server cannot process the request due to client error"),
            @ApiResponse(responseCode = "404", description = "id not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/updateAsset",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UpdateAssetResponse> updateAsset(
        @Parameter(name = "X-Request-Datacatalog-Update-Cred", description = "This header carries credential information related to accessing the relevant destination catalog.", required = true, schema = @Schema(description = "")) @RequestHeader(value = "X-Request-Datacatalog-Update-Cred", required = true) String xRequestDatacatalogUpdateCred,
        @Parameter(name = "UpdateAssetRequest", description = "Update Asset Request", required = true, schema = @Schema(description = "")) @Valid @RequestBody UpdateAssetRequest updateAssetRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
