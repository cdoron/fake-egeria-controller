/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.fybrik.datacatalog.api;

import org.fybrik.datacatalog.model.CreateAssetRequest;
import org.fybrik.datacatalog.model.CreateAssetResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "createAsset", description = "the createAsset API")
public interface CreateAssetApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /createAsset : This REST API writes data asset information to the data catalog configured in fybrik
     *
     * @param xRequestDatacatalogWriteCred This header carries credential information related to accessing the relevant destination catalog. (required)
     * @param createAssetRequest Write Asset Request (required)
     * @return successful operation (status code 201)
     *         or Bad request - server cannot process the request due to client error (status code 400)
     */
    @Operation(
        operationId = "createAsset",
        summary = "This REST API writes data asset information to the data catalog configured in fybrik",
        responses = {
            @ApiResponse(responseCode = "201", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CreateAssetResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad request - server cannot process the request due to client error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/createAsset",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateAssetResponse> createAsset(
        @Parameter(name = "X-Request-Datacatalog-Write-Cred", description = "This header carries credential information related to accessing the relevant destination catalog.", required = true, schema = @Schema(description = "")) @RequestHeader(value = "X-Request-Datacatalog-Write-Cred", required = true) String xRequestDatacatalogWriteCred,
        @Parameter(name = "CreateAssetRequest", description = "Write Asset Request", required = true, schema = @Schema(description = "")) @Valid @RequestBody CreateAssetRequest createAssetRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"assetID\" : \"assetID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
